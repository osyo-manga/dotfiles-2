snippet { "close curly bracket"
{
    ${1}
}
endsnippet


snippet pr "fmt.Print(..)"
fmt.Print(${1})${2}
endsnippet


snippet prf "fmt.Printf(..)"
fmt.Printf(${1})${2}
endsnippet


snippet spr "fmt.Sprint(..)"
fmt.Sprint(${1})${2}
endsnippet


snippet sprf "fmt.Sprintf(..)"
fmt.Sprintf(${1})${2}
endsnippet


snippet prl "fmt.Println(..)"
fmt.Println(${1})${2}
endsnippet


snippet ife "if err != nil {..}"
if err != nil {
	${1}
}
endsnippet


snippet ifee "if err := foo(); err != nil {..}"
if err := ${1}; err != nil {
	${2}
}
endsnippet


snippet en "errors.New(..)"
errors.New("${1}")${2}
endsnippet


snippet mg "if el, found := map[key]; found {..}"
if ${1}, found := ${2}; found {
    ${3}
}
endsnippet


snippet /^init/ "func init() {..}" r
func init() {
    ${1}
}
endsnippet


snippet /^test/ "func Test..(t *testing.T) {..}" r
func Test${1}(t *testing.T) {
    ${2}
}
endsnippet


snippet sort-interface "methods Len() Less() Swap()"
func (${1}) Len() int {
    return len(`!p snip.rv = t[1].split(" ")[0]`)
}
`!p rcv = t[1].split(" ")[0]`
func ($1) Less(i, j int) bool {
	return `!p snip.rv = rcv`[i] < `!p snip.rv = rcv`[j]
}

func ($1) Swap(i, j int) {
	`!p snip.rv = rcv`[i], `!p snip.rv = rcv`[j] = `!p snip.rv = rcv`[j], `!p snip.rv = rcv`[i]
}
endsnippet
